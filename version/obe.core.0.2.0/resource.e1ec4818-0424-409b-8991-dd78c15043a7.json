{
    "label": "dive-application.js",
    "name": "dive-application.js",
    "language": "JavaScript",
    "content": "import {StateMutation} from '/resources/dive-state-mutation.js';\nimport {DiveDataStore} from \"./dive-datastore.js\";\nimport {Logger} from \"./dive-logger.js\";\n\nexport let DiveApplication = function DiveApp(record, dataStore) {\n    let vm = this;\n    this._application = record;\n    this._dataStore = dataStore;\n\n    vm.initializeApplication = function () {\n        return function (resolve, reject) {\n            fetch(`/resources/${vm._application.name}.vue_app`, {\n                credentials: \"include\"\n            })\n                .then(async (response) => {\n                    let data = await response.json();\n                    let properties = eval(`(function() {\n                        return ${data.properties}\n                    })()`);\n                    Logger.debug(`Obtained response from server: `, response);\n                    Logger.debug(`Obtained data from server: `, data);\n                    Logger.info(`Initializing Application: ${vm._application.name}`);\n                    let computedProperties = {};\n                    let computedMethods = {};\n\n                    if (data.error) {\n                        Logger.error(data.error);\n                        resolve({\n                            name: vm._application.name,\n                            template: data.template,\n                            computed: computedProperties,\n                            methods: computedMethods\n                        });\n                        return;\n                    }\n\n                    data.records.forEach((record) => {\n                        console.log(record);\n                        if (!DiveDataStore.state.records[record._metadata.collection_name])\n                            Vue.set(DiveDataStore.state.records, record._metadata.collection_name, {});\n\n                        Vue.set(DiveDataStore.state.records[record._metadata.collection_name], record.unique_id, record);\n\n                        computedProperties[record._metadata.collection_name] = (function () {\n                            return function () {\n                                return this.$store.state.records[record._metadata.collection_name];\n                            };\n                        })();\n                    });\n\n                    Object.entries(DiveDataStore.state.records).forEach(([collectionKey, collection]) => {\n                        Object.entries(collection).forEach(([recordKey, record]) => {\n                            if (record._methods)\n                                Object.entries(record._methods).forEach(([methodKey]) => {\n                                    let mutation = new StateMutation(record, methodKey);\n                                    computedMethods[mutation.unique_id] = mutation.generateAPICall();\n                                });\n                        });\n                    });\n\n                    Logger.info(`Initialized application successfully`);\n\n                    let appStructure = {\n                        name: data.name,\n                        template: data.template,\n                        computed: computedProperties,\n                        methods: computedMethods\n                    };\n\n                    for (let key in properties) {\n                        if (properties.hasOwnProperty(key))\n                            appStructure[key] = Object.assign(properties[key], appStructure[key]);\n                    }\n                    console.log(appStructure);\n\n                    resolve(appStructure);\n                })\n                .catch(function (error) {\n                    Logger.error(`Failed to initialize application!`);\n                    reject(error);\n                });\n        }\n    }\n};",
    "unique_id": "e1ec4818-0424-409b-8991-dd78c15043a7",
    "dependencies": [],
    "_metadata": {
        "collection_name": "resource",
        "active": true,
        "created_on": 1483228800,
        "created_by": "admin",
        "updated_on": 1483228800,
        "updated_by": "admin"
    }
}