{
    "label": "dive-event-system.js",
    "name": "dive-event-system.js",
    "language": "JavaScript",
    "content": "import {Logger} from '/resources/dive-logger.js';\nimport {DiveApplication} from '/resources/dive-application.js';\nimport {DiveDataStore} from '/resources/dive-datastore.js';\n\nexport let DiveEventSystem = (function () {\n\n    // const options = {\n    //     connectionTimeout: 1000,\n    //     maxRetries: 10,\n    //     debug: true\n    // };\n    // const socket = new ReconnectingWebSocket(`wss://${document.location.hostname}:8080`, [], options);\n    //\n    // socket.onclose = function (event) {\n    //     Logger.debug(`WebSessionEventHandler connection closed. Event.code: ${event.code}, Event.reason: ${event.reason}, Event.wasClean: ${event.wasClean}`)\n    //\n    //     if (socket._shouldReconnect)\n    //         socket._connect()\n    // };\n\n    const src = new EventSource(`https://${document.location.hostname}:8080/event_stream`, /* { withCredentials: true } */);\n    src.addEventListener('open', function (event) {\n        Logger.debug(`WebSocket connection opened.`);\n        // src.send('dive__user__connected');\n    });\n\n    src.addEventListener('message', function (event) {\n        Logger.debug('Message from server ', JSON.parse(event.data));\n        const methodMap = {\n            'dive__record__updated': function (record) {\n                Logger.debug(`Updating record: ${record.unique_id}`);\n                if (!DiveDataStore.state.records[record._metadata.collection_name])\n                    Vue.set(DiveDataStore.state.records, record._metadata.collection_name, {});\n\n                Vue.set(DiveDataStore.state.records[record._metadata.collection_name], record.unique_id, record);\n            },\n            'dive__record__created': function (record) {\n                Logger.debug(`Adding record: ${record.unique_id}`);\n\n                if (!DiveDataStore.state.records[record._metadata.collection_name])\n                    Vue.set(DiveDataStore.state.records, record._metadata.collection_name, {});\n\n                Vue.set(DiveDataStore.state.records[record._metadata.collection_name], record.unique_id, record);\n                if (record._metadata.collection_name == 'app') {\n                    Vue.component(record.unique_id, new DiveApplication(record, DiveDataStore).initializeApplication());\n                }\n            },\n            'dive__record__deleted': function (record) {\n                Logger.debug(`Removing record: ${record.unique_id}`);\n                if (!DiveDataStore.state.records[record._metadata.collection_name])\n                    return;\n\n                Vue.delete(DiveDataStore.state.records[record._metadata.collection_name], record.unique_id, record);\n            },\n            'dive__session__initiated': function (payload) {\n                Logger.debug(`Initiated session with ID: ${payload.session_id} at ${payload.date}`)\n            }\n        };\n\n        const data = JSON.parse(event.data);\n        if (methodMap[data.message_id]) {\n            methodMap[data.message_id](data.payload);\n        } else\n            Logger.error(`Don't know what to do with message!`, data);\n    });\n})();",
    "unique_id": "cbf22c7c-d150-49a3-9113-4ce5dfbfd8a6",
    "dependencies": [],
    "_metadata": {
        "collection_name": "resource",
        "active": true,
        "created_on": 1483228800,
        "created_by": "admin",
        "updated_on": 1483228800,
        "updated_by": "admin"
    }
}